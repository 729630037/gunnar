<!-- <?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="world" default="empty"/> 
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="$(find gunnar)/models:$(optenv GAZEBO_MODEL_PATH)"/>

  We resume the logic in empty_world.launch, changing only the name of the world to be launched
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    arg name="world_name" value="$(arg world)"/> 
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>



  Spawn the robot into Gazebo
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find gunnar)/models/gunnar/model.sdf -sdf -model gunnar" />

</launch> -->




<launch>
  <!-- <arg name="world_file"  default="$(find gazebo_ros)/launch/empty_world.launch"/> -->
  <arg name="gui" default="true"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <!-- <arg name="world_name" value="$(arg world_file)"/> -->
    <arg name="verbose" value="true" />
  </include>
  
  <arg name="urdf_file" default="$(find xacro)/xacro --inorder --check-order '$(find gunnar)/description/gunnar.urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />
  
  <!-- Gazebo model spawner -->
  <node name="spawn_gunnar_model" pkg="gazebo_ros" type="spawn_model"
        args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model gunnar"/>
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <!-- <node name="rviz" pkg="rviz" type="rviz" required="true" /> -->
  
  <!-- Fake laser -->
  <!-- <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node> -->
</launch>
